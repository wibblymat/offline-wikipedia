{>"base"/}
{<bodyContent}
  <link rel="stylesheet" href="/css/flags.css">
  <div class="subheading">
    <div class="heading-text">
      <h1>Site render flags</h1>
    </div>
  </div>

  <div class="card">
    <div class="card-content">
      <p>
        Here you can configure how the site is served by setting cookies:
      </p>
      <form action="./" class="flags-form">
        <label>
          <div class="input-container">
            <input type="checkbox" name="conditional-polyfills" value="1"{?flags.conditional-polyfills} checked{/flags.conditional-polyfills}>
          </div>
          <div class="desc">
            <div class="main">Conditonal polyfills.</div>
            <div class="sub">
              Only include the Web Components polyfills in browers that actually need them.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="vulcanize" value="1"{?flags.vulcanize} checked{/flags.vulcanize}>
          </div>
          <div class="desc">
            <div class="main">Vulcanize.</div>
            <div class="sub">
              Use the vulcanize process to reduce the size of the Polymer
              elements downloaded.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="async-imports" value="1"{?flags.async-imports} checked{/flags.async-imports}>
          </div>
          <div class="desc">
            <div class="main">Async imports.</div>
            <div class="sub">
              Load HTML imports asynchronously rather than blocking render until
              all components have loaded.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="client-render" value="1"{?flags.client-render} checked{/flags.client-render}>
          </div>
          <div class="desc">
            <div class="main">Prevent server-side rendering of articles.</div>
            <div class="sub">
              Article fetching &amp; rendering will be handled by JS. Note that
              the client will always render articles when the ServiceWorker is
              present.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="avoid-wikipedia" value="1"{?flags.avoid-wikipedia} checked{/flags.avoid-wikipedia}>
          </div>
          <div class="desc">
            <div class="main">Avoid going to wikipedia for article data.</div>
            <div class="sub">Although all articles will be about Hulk Hogan. But who <em>doesn't</em> want that?</div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="prevent-sw" value="1"{?flags.prevent-sw} checked{/flags.prevent-sw}>
          </div>
          <div class="desc">
            <div class="main">Prevent ServiceWorker registration.</div>
            <div class="sub">Will also unregister an existing ServiceWorker. This removes all offline-first behaviour.</div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="disable-chunking" value="1"{?flags.disable-chunking} checked{/flags.disable-chunking}>
          </div>
          <div class="desc">
            <div class="main">Disable chunking</div>
            <div class="sub">
              All pages are served with chunking, this is particularly useful on
              article pages as it allows the top-of-page content to be rendered
              while the request to wikipedia is still in progress.
              This only impacts server-side rendering.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="no-wiki-piping" value="1"{?flags.no-wiki-piping} checked{/flags.no-wiki-piping}>
          </div>
          <div class="desc">
            <div class="main">Disable wikipedia piping</div>
            <div class="sub">
              By default, content is piped from wikipedia to the response. If
              you tick this, content will be fully buffered on the server
              before sending. This only impacts server-side rendering.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="auto-cache-article" value="1"{?flags.auto-cache-article} checked{/flags.auto-cache-article}>
          </div>
          <div class="desc">
            <div class="main">Auto-cache article</div>
            <div class="sub">
              Every article you visit will be cached for offline viewing.
              Obviously this can land you with a massive cache.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="prevent-streaming" value="1"{?flags.prevent-streaming} checked{/flags.prevent-streaming}>
          </div>
          <div class="desc">
            <div class="main">Prevent client-side streaming</div>
            <div class="sub">
              When rendering articles on the client, the streaming API is used in Canary
              to get a quicker first render. This setting disables that optimisation.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="no-css-async-hack" value="1"{?flags.no-css-async-hack} checked{/flags.no-css-async-hack}>
          </div>
          <div class="desc">
            <div class="main">Don't load extra CSS with XHR.</div>
            <div class="sub">
              XHR is used to hack around Chrome/Safari's blocking behaviour. With
              this set, a standard link tag is used just before article content.
              You may need to remove your ServiceWorker to pick up this change.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="article-css-import" value="1"{?flags.article-css-import} checked{/flags.article-css-import}>
          </div>
          <div class="desc">
            <div class="main">Use @import to load article CSS.</div>
            <div class="sub">
              Rather than a link tag. This requires the "Don't load extra CSS with XHR"
              flag, and has no effect if "Regular CSS loading" is used. Complicated eh?
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="regular-css-loading" value="1"{?flags.regular-css-loading} checked{/flags.regular-css-loading}>
          </div>
          <div class="desc">
            <div class="main">Regular CSS loading.</div>
            <div class="sub">
              Load all CSS using a link tag in the head. By deafult, a
              small amount of CSS loads inline, and the second loads depending
              on the above option.
              You may need to remove your ServiceWorker to pick up this change.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="blocking-js" value="1"{?flags.blocking-js} checked{/flags.blocking-js}>
          </div>
          <div class="desc">
            <div class="main">Render-blocking JS</div>
            <div class="sub">
              Get that framework feel by making the JS render-blocking.
              By default it loads deferred.
              You may need to remove your ServiceWorker to pick up this change.
            </div>
          </div>
        </label>
        <label>
          <div class="input-container">
            <input type="checkbox" name="framework-js" value="1"{?flags.framework-js} checked{/flags.framework-js}>
          </div>
          <div class="desc">
            <div class="main">Framework-sized JS</div>
            <div class="sub">
              Get that framework feel even more by inflating the size of the JS.
              You may need to remove your ServiceWorker to pick up this change.
            </div>
          </div>
        </label>
        <div class="submit-container">
          <button type="submit" class="material-button">Save</button>
        </div>
      </form>
      <p>
        Or use the following querystring to overwrite flags for a single
        request:
      </p>
      <div class="flags-query">?use-url-flags&amp;</div>
      <p>
        And here's a WebPageTest script:
      </p>
      <div class="flags-webpagetest-script"></div>
    </div>
  </div>
{/bodyContent}
